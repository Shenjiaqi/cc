#include <algorithm>
#include <string>
#include <vector>
#include <cmath>
#include <map>
#include <fstream>
#include <cassert>
#include <set>
#include <queue>
#include <iostream>
#include <utility>
#include <stack>
#include <complex>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <functional>
#include <cctype>
using namespace std;
typedef long double ld;
typedef long long ll;
typedef pair<int,int> ppi;
typedef pair<ll,ll> ppl;
typedef pair<double,double> ppd;
#define PB push_back
#define MP make_pair
#define FIR first
#define SEC second
#define FOR(a,b,c) for(int a=(b);a<(c);++a)
#define FR(a,b) for(typeof(b.begin()) a=b.begin();a!=b.end();++a)
const int N = 1e5 + 7;
const int Q = 1e5 + 7;
struct e
{
  ll s, d;
  ll v;
};
e p[N];
int r, p1, p2;
ll pri;
ll val[N];
ll base = 1e9;
ll addM( ll a, ll b)
{
  a %= pri, b %= pri;
  return ( a + b ) % pri;
}
ll subM( ll a, ll b)
{
  a %= pri, b %= pri;
  a -= b;
  if( a < 0 )
    a += pri;
  return a;
}
void tra( ll from, vector<int> &to )
{
  for( ; from > 0; from /= base)
    to.push_back( from % base );
  reverse( to.begin(), to.end() );
}
void mul( vector<int> &a, vector<int> &b, vector<int> &c)
{
  for( int i = 0; i < a.size(); ++i )
    for( int j = 0; j < b.size(); ++j )
      {
	if( i + j >= c.size() )
	  c.resize( i + j + 1 );
	ll tmp = (ll)a[i] * (ll)b[j] + (ll)c[ i + j ];
	c[ i + j ] = tmp % base;
	tmp /= base;
	if( tmp > 0 )
	  {
	    if( i + j + 1 >= c.size() )
	      c.resize( i + j + 2 );
	    c[ i + j + 1 ] += tmp;
	  }
      }
}
void sub( vector<int> &a, vector<int> &b, vector<int> &c)
{
  assert( a.size() >= b.size() );
  int r(0);
  c.resize(0);
  for( int i = 0; i < a.size(); ++i )
    {
      int tmp = a[i] - r;
      if( i < b.size() )
	tmp -= b[i];
      if( tmp < 0 )
	c.push_back( tmp + base ), r = 1;
      else
	c.push_back(tmp), r = 0;
    }
  for( ; !c.empty() && c[ c.size() - 1 ] == 0; c.pop_back() )
    ;
}
void mul( vector<int> &a, int b, vector<int> &c)
{
  vector<int> tmp;
  tra( b, tmp);
  mul( a, tmp, c);
}
void div( vector<int> &a, vector<int> &b, vector<int> &c)
{
  c.resize(0);
  if( a.size() < b.size() )
    return c;
  for( int i = a.size() - b.size(); i >= 0; --i )
    {
      int f = ( a[ i + b.size() - 1 ] ) / ( b[ b.size() - 1 ] + 1 );
      int t = ( a[ i + b.size() - 1 ] + 1 ) / ( b[ b.size() - 1 ]);
      int v = 0;
      for( ; f <= t; )
	{
	  vector<int> tmp;
	  int val = ( (ll)f + t ) / 2;
	  mul( b, val, tmp);
	  int cmp = 0;
	  if( tmp.size() > b.size() )
	    cmp = -1;
	  else if( tmp.size() < b.size() )
	    cmp = 1;
	  else
	    for( int j = b.size() - 1; j >= 0; --j )
	      if( tmp[j] != a[ j + i ] )
		{
		  if( tmp[j] > a[ j + i ] )
		    cmp = -1;
		  else cmp = 1;
		  break;
		}
	  if( cmp >= 0 )
	    {
	      f = val + 1, v = val;
	      if( cmp == 0 )
		break;
	    }
	  else if( cmp < 0 )
	    t = val - 1;
	}
      c.push_back(v);
    }
  reverse( c.begin(), c.end() );
}
ll utra( vector<int> &from )
{
  vector<int> ppri, d, tmp, tmp2;
  tra( pri, ppri);
  div( from, ppri, d);
  mul( ppri, d, tmp);
  sub( from, tmp, tmp2);
  ll r(0);
  assert( tmp2.size() < 3 );
  for( auto i : tmp2 )
    r = r * base + i;
  return r;
}
ll mulM( ll a, ll b)
{
  vector<int> aa, bb, cc;
  tra( a, aa);
  tra( b, bb);
  mul( aa, bb, cc);
  return utra(cc);
}
int dfsInit( int id, int from, int to)
{
  p[id].s = 0;
  p[id].d = 0;
  if( from == to )
    {
      p[id].v = p[id];
    }
  else
    {
      int mid = ( from + to ) / 2;
      p[id].v = dfsInit( id * 2, from, mid ) +
	dfsInit( id * 2 + 1, mid + 1, t);
    }
  return p[id].v;
}
void init( int n )
{
  dfsInit( 1, 1, n);
}
void dfsAddAgp( int id, int from, int to, int s, int d, int x, int y)
{
  if( to < y || from > x )
    return;
  if( x <= from && to <= y )
    {
      ll tmp = mulM( addM( s, mulM( x - from, d) ), powM( r, x - from ) );
      p[i].s = addM( tmp, p[i].s );
      p[i].d = addM( p[i].d, d);
    }
  else
    {
      int mid = ( x + y ) / 2;
      dfsAddAgp( id * 2, from, to, idv, x, mid );
      dfsAddAgp( id * 2 + 1, from, to, idv, mid + 1, y);
    }
}
void addAgp( int s, int d, int from, int to )
{
  dfsAddAgp( 1, from, to, s, d, 1, n);
}
ll cal( ll s, ll d, int num )
{
  if( r > 1 )
    {
      ll rr = rev( r - 1 );
      ll r_a_1 = powM( r, num - 1 );
      ll tmp1 = mulM( s, subM( r_a_1, 1) );
      ll tmp2 = mulM( subM( num, 1), mulM( r_a_1, r) );
      ll tmp3 = mulM(mulM( r, subM( 1, r_a_1 ) ), rr);
      tmp2 = mulM( d, addM( tmp2, tmp3) );
      tmp1 = mulM( addM( tmp1, tmp2), rr);
      return tmp1;
    }
  ll rr = rev( r - 1 );
  ll tmp1 = subM( powM( r, num - 1), 1 );
  tmp1 = mulM( s, mulM( tmp1, rr) );
  ll tmp2 = mulM( mulM( subM( num, 1 ), d), num);
  tmp2 = mulM( tmp2, rev( 2 ) );
  return addM( tmp1, tmp2);
}
ll dfsGetSum( int id, int from, int to, int x, int y)
{
  if( y < from || to < x )
    return 0;
  if( p[id].s || p[id].d )
    {
      if( x < y )
	{
	  int mid = ( x + y ) / 2;
	  dfsAddAgp( id * 2, x, y, p[id].s, p[id].d, x, mid);
	  dfsAddAgp( id * 2 + 1, x, y, p[id].s, p[id].d, mid + 1, y);
	}
      p[id].v = addM( p[id].v, cal( p[id].s, p[id].d, x - y + 1) );
      p[id].s = p[id].d = 0;
    }
  if( x <= from && to <= y )
    {
      return p[id].v;
    }
  int mid = ( x + y ) / 2;
  return addM( dfsGetSum( id * 2, from, to, x, mid ),
	       dfsGetSum( id * 2 + 1, from, to, mid + 1, y) );
}
ll getSum( int from, int to)
{
  return dfsGetSum( 1, from, to, 1, n);
}
ll dfsSetVal( int id, int pos, int g, int x, int y)
{
  if( p[id].s || p[id].d )
    {
      if( x < y )
	{
	  int mid = ( x + y ) / 2;
	  dfsAddAgp( id * 2, x, y, p[id].s, p[id].d, x, mid);
	  dfsAddAgp( id * 2 + 1, x, y, p[id].s, p[id].d, mid + 1, y );
	}
      p[id].v = addM( p[id].v, cal( p[id].s, p[id].d, y - x + 1 ) );
      p[id].s = p[id].d = 0;
    }
  if( x == y )
    {
      ll tmp = powM( p[id].v, g);
      tmp = tmp % p2;
      ll det = subM( tmp, p[id].v);
      p[id].v = tmp;
      return det;
    }
  int mid = ( x + y ) / 2;
  ll det;
  if( pos <= mid )
    det = dfsSetVal( id * 2, pos, g, x, mid );
  else
    det = dfsSetVal( id * 2 + 1, pos, g, mid + 1, y );
  p[id].v = addM( p[id].v, det);
  return det;
}
void setVal( int x, int g)
{
  dfsSetVal( 1, x, g, 1, n);
}
int main()
{
  int T;
  scanf("%d", &T);
  for( int t = 0; t < T; ++t)
    {
      int n, q;
      scanf("%d%d%d%d%d", &n, &q, &r, &p1, &p2);
      pri = (ll)p1 * (ll)p2;
      for( int i = 0; i < n; ++i )
	{
	  int a;
	  scanf("%d", &a);
	  val[i] = a;
	}
      init(n);
      sdi = 0;
      lsti = 0;
      for( int i = 0; i < q; ++i )
	{
	  int type;
	  scanf("%d", &type);
	  if( type == 0 )
	    {
	      int s, d, x, y;
	      scanf("%d%d%d%d", &s, &d, &x, &y);
	      addAgp( s, d, x, y);
	    }
	  else if( type == 1 )
	    {
	      int x, g;
	      scanf("%d%d", &x, &g);
	      setVal( x, g);
	    }
	  else if( type == 2 )
	    {
	      int x, y;
	      scanf("%d%d", &x, &y);
	      ll val = getSum( x, y);
	      printf("%d\n", (int)( val % p1) );
	    }
	}
    }
  return 0;
}
